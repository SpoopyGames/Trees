<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_start();
d3d_set_culling(false);
d3d_set_lighting(false);
d3d_set_hidden(false);
d3d_set_fog(true,$000F0E,200,300);

draw_set_alpha_test(true);
draw_set_alpha_test_ref_value(40);

//gamepad_set_axis_deadzone(0,0.1);
x=x;

x = x;
y = y;
z = 50;

xnext = x;
ynext = y;
znext = z;

//pad_num = 0;

direction = 0;
image_speed = 0.15;
//////////////////////////////////////////////////////

global.tilesize = 64;
bounds = 20;    //how many tiles wide and tall the floor will be
prevxtile = floor(x/global.tilesize);   //convert the x coordinate from being in pixels to being in tiles
prevytile = floor(y/global.tilesize);   //convert the y coordinate from being in pixels to being in tiles


//place the tiles neatly around the player in a grid pattern
var _x,_y;
for(_x=0;_x&lt;bounds;_x+=1) {
    for(_y=0;_y&lt;bounds;_y+=1) {
        instance_create(x+(-bounds/2+_x)*global.tilesize,y+(-bounds/2+_y)*global.tilesize,obj_grass);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>friction = .5;
/*
if (gamepad_is_connected(0))
{
    speed =  gamepad_axis_value (0, gp_axislh) * 1.5
    speed = -gamepad_axis_value (0, gp_axislv) * 1.5
}
*/

if keyboard_check(vk_lshift)
{
    if keyboard_check(ord("W")) then speed = 6;
    if keyboard_check(ord("S")) then speed = -6;
}
else
{
    if keyboard_check(ord("W")) then speed = 1.5;
    if keyboard_check(ord("S")) then speed = -1.5;
}

if keyboard_check(ord("D"))
{
    var xn, yn;
    xn = x + sin(direction*pi/180);
    yn = y + cos(direction*pi/180);
    if not place_meeting(xn,yn,5)
    { x = xn; y = yn; }
}

if keyboard_check(ord("A"))
{
    var xn, yn;
    xn = x - sin(direction*pi/180);
    yn = y - cos(direction*pi/180);
    if not place_meeting(xn,yn,5)
    { x = xn; y = yn; }
}

if keyboard_check(vk_escape)
{
    game_end();
}
//////////////////////////////////////// infinite terrain

if (floor(x/global.tilesize) != prevxtile || floor(y/global.tilesize) != prevytile) 
{
    prevxtile = floor(x/global.tilesize);   //convert the x coordinate from being in pixels to being in tiles
    prevytile = floor(y/global.tilesize);   //convert the y coordinate from being in pixels to being in tiles
    
    with(obj_grass) {//for all instances of floorTile do the following code
        var xdist,ydist;//create temporary variables
        
        xdist = (other.x-x)/global.tilesize;//get distance (in tiles) to the player on the x axis
        ydist = (other.y-y)/global.tilesize;//get distance (in tiles) to the player on the y axis
        
        //if its so far away that its at the edge of the bounding box, move it to the other side of the bounding box (x axis)
        if (xdist&gt;other.bounds/2) {
            x += other.bounds*global.tilesize;
            if (random(10)&gt;9)
            {
                instance_change(obj_other, false);
            }
        } 
        else if (xdist&lt;-other.bounds/2) {
            x -= other.bounds*global.tilesize;
        }
        //if its so far away that its at the edge of the bounding box, move it to the other side of the bounding box (y axis)
        if (ydist&gt;other.bounds/2) {
            y += other.bounds*global.tilesize;
            if (random(10)&gt;9)
            {
                instance_change(obj_other, false);
            }
        } else if (ydist&lt;-other.bounds/2) {
            y -= other.bounds*global.tilesize;
        }
    }
    
    with(obj_other) {//for all instances of floorTile do the following code
        var xdist,ydist;//create temporary variables
        
        xdist = (other.x-x)/global.tilesize;//get distance (in tiles) to the player on the x axis
        ydist = (other.y-y)/global.tilesize;//get distance (in tiles) to the player on the y axis
        
        //if its so far away that its at the edge of the bounding box, move it to the other side of the bounding box (x axis)
        if (xdist&gt;other.bounds/2) {
            x += other.bounds*global.tilesize;
            if (random(10)&lt;8)
            {
                instance_change(obj_grass, false);
            }
        } 
        else if (xdist&lt;-other.bounds/2) {
            x -= other.bounds*global.tilesize;
        }
        //if its so far away that its at the edge of the bounding box, move it to the other side of the bounding box (y axis)
        if (ydist&gt;other.bounds/2) {
            y += other.bounds*global.tilesize;
            if (random(10)&lt;8)
            {
                instance_change(obj_grass, false);
            }
        } else if (ydist&lt;-other.bounds/2) {
            y -= other.bounds*global.tilesize;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>direction -= (display_mouse_get_x()-(display_get_width()/2))/5
znext -= (display_mouse_get_y()-(display_get_height()/2))/2
display_mouse_set(display_get_width()/2, display_get_height()/2)
xnext=lengthdir_x(200,direction)+x;
ynext=lengthdir_y(200,direction)+y;

draw_set_color(c_white);
d3d_set_projection_ext(x,y,z,xnext,ynext,znext,0,0,1,45,320/180,1,16000)

//d3d_draw_floor(0,0,0,room_width,room_height,0,background_get_texture(bg_grass),room_width/64,room_height/64)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
